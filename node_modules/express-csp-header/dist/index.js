"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const csp_header_1 = require("csp-header");
const parse_domain_1 = __importDefault(require("parse-domain"));
const constants_1 = require("./constants");
__export(require("./constants"));
function expressCspHeader(params) {
    return function (req, res, next) {
        if (!params) {
            next();
            return;
        }
        let { domainOptions } = params;
        let cspString = getCspString(req, res, params);
        cspString = applyNonce(req, cspString);
        cspString = applyAutoTld(req, cspString, domainOptions);
        setHeader(res, cspString, params);
        next();
    };
}
exports.expressCspHeader = expressCspHeader;
function getCspString(req, res, params) {
    let { directives, presets, reportUri } = params;
    let cspHeaderParams = {
        directives,
        presets,
        reportUri: typeof reportUri === 'function' ? reportUri(req, res) : reportUri
    };
    return csp_header_1.getCSP(cspHeaderParams);
}
function applyNonce(req, cspString) {
    if (cspString.includes(constants_1.NONCE)) {
        req.nonce = crypto_1.default.randomBytes(16).toString('base64');
        return cspString.replace(new RegExp(constants_1.NONCE, 'g'), csp_header_1.nonce(req.nonce));
    }
    return cspString;
}
function applyAutoTld(req, cspString, domainOptions) {
    if (cspString.includes(constants_1.TLD)) {
        let domain = parse_domain_1.default(req.hostname, domainOptions);
        if (!domain || !domain.tld) {
            return cspString;
        }
        return cspString.replace(new RegExp(constants_1.TLD, 'g'), domain.tld);
    }
    return cspString;
}
const CSP_HEADER = 'Content-Security-Policy';
const CSP_REPORT_ONLY_HEADER = 'Content-Security-Policy-Report-Only';
function setHeader(res, cspString, params) {
    let headerName = params.reportOnly ? CSP_REPORT_ONLY_HEADER : CSP_HEADER;
    res.set(headerName, cspString);
}
//# sourceMappingURL=index.js.map